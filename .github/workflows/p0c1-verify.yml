name: P0C1 – Inert Flag Framework Verification (robust)

on:
  push:
    branches: [ "**" ]
    paths:
      - "crapssim_control/**"
      - ".github/workflows/p0c1-verify.yml"
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  verify-inertness:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"
      SPEC_PATH: "examples/quickstart_spec.json"   # update if your canonical spec lives elsewhere
      SEED: "123"
      ROLLS: "50"
      CMD: "python -m crapssim_control.cli"
      CSC_DEBUG: "0"

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve SHAs
        id: shas
        run: |
          echo "HEAD_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "PREV_SHA=$(git rev-parse HEAD^)" >> $GITHUB_OUTPUT

      - name: Freeze spec from HEAD for both runs
        run: |
          mkdir -p /tmp/p0c1
          cp "${SPEC_PATH}" /tmp/p0c1/spec.json

      # ---------- Install once to pin engine version ----------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Resolve & Pin engine version
        id: pin
        run: |
          python -m pip install -U pip
          pip install "crapssim" "PyYAML>=6.0"
          # capture the exact installed version to reuse
          CRAPSSIM_VERSION=$(python - <<'PY'
import importlib.metadata as m
print(m.version("crapssim"))
PY
)
          echo "CRAPSSIM_VERSION=$CRAPSSIM_VERSION" >> $GITHUB_OUTPUT

      # ---------- BEFORE: HEAD^ with pinned engine & frozen spec ----------
      - name: Checkout previous commit (baseline)
        run: git checkout ${{ steps.shas.outputs.PREV_SHA }}

      - name: Install package (baseline)
        run: |
          pip install -e .
          python -c "import crapssim, importlib.metadata as m; print('crapssim=='+m.version('crapssim'))"
          python -c "import crapssim_control as _; print('installed crapssim_control (baseline)')"

      - name: Run baseline (capture)
        run: |
          mkdir -p baselines/p0c1/before
          set -e
          $CMD run /tmp/p0c1/spec.json --seed "$SEED" --rolls "$ROLLS" > baselines/p0c1/before/out.txt 2>&1 || true
          # RESULT only
          grep '^RESULT:' baselines/p0c1/before/out.txt > baselines/p0c1/before/result.txt || true

      # ---------- AFTER: HEAD with same pinned engine & same frozen spec ----------
      - name: Checkout current commit (candidate)
        run: git checkout ${{ steps.shas.outputs.HEAD_SHA }}

      - name: Reinstall engine (pinned) and package (candidate)
        run: |
          pip install --force-reinstall --no-deps "crapssim==${{ steps.pin.outputs.CRAPSSIM_VERSION }}"
          pip install -e .
          python -c "import crapssim, importlib.metadata as m; print('crapssim=='+m.version('crapssim'))"
          python -c "import crapssim_control as _; print('installed crapssim_control (candidate)')"

      - name: Run candidate (capture)
        run: |
          mkdir -p baselines/p0c1/after
          set -e
          $CMD run /tmp/p0c1/spec.json --seed "$SEED" --rolls "$ROLLS" > baselines/p0c1/after/out.txt 2>&1 || true
          grep '^RESULT:' baselines/p0c1/after/out.txt > baselines/p0c1/after/result.txt || true

      - name: Compare BEFORE vs AFTER (RESULT lines must match)
        run: |
          set -e
          diff -u baselines/p0c1/before/result.txt baselines/p0c1/after/result.txt

      - name: Flags are accepted but inert (full stdout within HEAD)
        run: |
          set -e
          $CMD run /tmp/p0c1/spec.json --seed "$SEED" --rolls "$ROLLS" \
            > baselines/p0c1/after/out_plain.txt 2>&1 || true
          $CMD run /tmp/p0c1/spec.json --seed "$SEED" --rolls "$ROLLS" \
            --demo-fallbacks --strict --no-embed-analytics \
            > baselines/p0c1/after/out_flags.txt 2>&1 || true
          diff -u baselines/p0c1/after/out_plain.txt baselines/p0c1/after/out_flags.txt

      - name: Emit summary
        if: ${{ success() }}
        run: |
          echo "✅ P0·C1 verified:"
          echo "   • Same spec (frozen) and pinned engine → RESULT lines identical across commits."
          echo "   • Within HEAD, flags do not alter full stdout."