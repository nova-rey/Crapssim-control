name: P0C1 – Inert Flag Framework Verification (robust)

on:
  push:
    branches: [ "**" ]
    paths:
      - "crapssim_control/**"
      - ".github/workflows/p0c1-verify.yml"
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  verify-inertness:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"
      SPEC_PATH: "examples/quickstart_spec.json"   # change if your canonical spec lives elsewhere
      SEED: "123"
      ROLLS: "50"
      CMD: "python -m crapssim_control.cli"
      CSC_DEBUG: "0"
      PYTHONHASHSEED: "0"

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine commit situation
        id: commits
        shell: bash
        run: |
          set -euxo pipefail
          COUNT=$(git rev-list --count HEAD)
          echo "COUNT=$COUNT" >> $GITHUB_OUTPUT
          if [ "$COUNT" -gt 1 ]; then
            echo "HEAD_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            echo "PREV_SHA=$(git rev-parse HEAD^)" >> $GITHUB_OUTPUT
            echo "MODE=cross" >> $GITHUB_OUTPUT
          else
            echo "HEAD_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            echo "PREV_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            echo "MODE=single" >> $GITHUB_OUTPUT
          fi

      - name: Freeze spec from HEAD for both runs
        shell: bash
        run: |
          set -euxo pipefail
          test -f "${SPEC_PATH}" || (echo "Spec not found at ${SPEC_PATH}" && ls -la && exit 1)
          mkdir -p /tmp/p0c1
          cp "${SPEC_PATH}" /tmp/p0c1/spec.json
          echo "Using spec:"; wc -c /tmp/p0c1/spec.json; head -n 20 /tmp/p0c1/spec.json || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Pin engine version once
        id: pin
        shell: bash
        run: |
          set -euxo pipefail
          python -m pip install -U pip
          pip install "crapssim" "PyYAML>=6.0"
          CRAPSSIM_VERSION=$(python - <<'PY'
import importlib.metadata as m
print(m.version("crapssim"))
PY
)
          echo "CRAPSSIM_VERSION=$CRAPSSIM_VERSION" >> $GITHUB_OUTPUT
          echo "Pinned crapssim==$CRAPSSIM_VERSION"

      # ---------- BEFORE ----------
      - name: Checkout previous commit (baseline)
        if: ${{ steps.commits.outputs.MODE == 'cross' }}
        shell: bash
        run: |
          set -euxo pipefail
          git checkout ${{ steps.commits.outputs.PREV_SHA }}

      - name: Install package (baseline)
        shell: bash
        run: |
          set -euxo pipefail
          pip install --force-reinstall --no-deps "crapssim==${{ steps.pin.outputs.CRAPSSIM_VERSION }}"
          pip install -e .
          python -c "import crapssim, importlib.metadata as m; print('crapssim=='+m.version('crapssim'))"
          python -c "import crapssim_control as _; print('installed crapssim_control (baseline)')"

      - name: Run baseline
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p baselines/p0c1/before
          ${CMD} run /tmp/p0c1/spec.json --seed "$SEED" --rolls "$ROLLS" > baselines/p0c1/before/out.txt 2>&1 || true
          grep '^RESULT:' baselines/p0c1/before/out.txt > baselines/p0c1/before/result.txt || true
          tail -n 5 baselines/p0c1/before/out.txt || true

      # ---------- AFTER ----------
      - name: Checkout current commit (candidate)
        if: ${{ steps.commits.outputs.MODE == 'cross' }}
        shell: bash
        run: |
          set -euxo pipefail
          git checkout ${{ steps.commits.outputs.HEAD_SHA }}

      - name: Reinstall engine (pinned) and package (candidate)
        shell: bash
        run: |
          set -euxo pipefail
          pip install --force-reinstall --no-deps "crapssim==${{ steps.pin.outputs.CRAPSSIM_VERSION }}"
          pip install -e .
          python -c "import crapssim, importlib.metadata as m; print('crapssim=='+m.version('crapssim'))"
          python -c "import crapssim_control as _; print('installed crapssim_control (candidate)')"

      - name: Run candidate
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p baselines/p0c1/after
          ${CMD} run /tmp/p0c1/spec.json --seed "$SEED" --rolls "$ROLLS" > baselines/p0c1/after/out.txt 2>&1 || true
          grep '^RESULT:' baselines/p0c1/after/out.txt > baselines/p0c1/after/result.txt || true
          tail -n 5 baselines/p0c1/after/out.txt || true

      - name: Compare BEFORE vs AFTER (RESULT lines)
        if: ${{ steps.commits.outputs.MODE == 'cross' }}
        shell: bash
        run: |
          set -euxo pipefail
          diff -u baselines/p0c1/before/result.txt baselines/p0c1/after/result.txt

      # ---------- Intra-commit inertness of flags ----------
      - name: Flags are accepted but inert (within HEAD)
        shell: bash
        run: |
          set -euxo pipefail
          ${CMD} run /tmp/p0c1/spec.json --seed "$SEED" --rolls "$ROLLS" \
            > baselines/p0c1/after/out_plain.txt 2>&1 || true
          ${CMD} run /tmp/p0c1/spec.json --seed "$SEED" --rolls "$ROLLS" \
            --demo-fallbacks --strict --no-embed-analytics \
            > baselines/p0c1/after/out_flags.txt 2>&1 || true
          tail -n 5 baselines/p0c1/after/out_plain.txt || true
          tail -n 5 baselines/p0c1/after/out_flags.txt || true
          diff -u baselines/p0c1/after/out_plain.txt baselines/p0c1/after/out_flags.txt

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: p0c1-outputs
          path: |
            baselines/p0c1/**/*
            /tmp/p0c1/spec.json

      - name: Job summary
        if: ${{ success() }}
        run: |
          echo "✅ P0·C1 verified."
          echo "Mode: ${{ steps.commits.outputs.MODE }}"
          echo "Pinned crapssim==${{ steps.pin.outputs.CRAPSSIM_VERSION }}"